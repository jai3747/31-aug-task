name: Security and CI Pipeline
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  trufflehog:
    runs-on: self-hosted
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: .
        base: ${{ github.event.before }}
        head: ${{ github.event.after }}
        extra_args: --only-verified

  snyk:
    runs-on: self-hosted
    needs: trufflehog
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'

    - name: Install dependencies
      run: npm install

    - name: Run Snyk
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      run: |
        npm install -g snyk
        snyk test --json > snyk-results.json || true
      continue-on-error: true

  semgrep:
    runs-on: self-hosted
    needs: snyk
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: auto

  docker_build:
    runs-on: self-hosted
    needs: semgrep
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    
    - name: Set up Docker Build
      uses: docker/setup-build-action@v2

    - name: Build Docker image
      run: |
        
        docker build --file Dockerfile --tag my-node-app:latest 

  trivy:
    runs-on: self-hosted
    needs: docker_build
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Configure Docker to use Minikube
      run: eval $(minikube docker-env)

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'my-node-app:latest'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

    - name: Upload scan results
      uses: actions/upload-artifact@v2
      with:
        name: scan-results
        path: trivy-results.json

  ecr_push:
    runs-on: self-hosted
    needs: trivy
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Configure Docker to use Minikube
      run: eval $(minikube docker-env)

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Create ECR repository if it doesn't exist
      run: |
        aws ecr describe-repositories --repository-names ${{ secrets.AWS_ECR_REPOSITORY_NAME }} || aws ecr create-repository --repository-name ${{ secrets.AWS_ECR_REPOSITORY_NAME }}

    - name: Push Docker image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY_NAME }}
        IMAGE_TAG: latest
      run: |
        if [ -z "$ECR_REPOSITORY" ]; then
          echo "Error: ECR_REPOSITORY is not set. Please make sure AWS_ECR_REPOSITORY_NAME secret is configured."
          exit 1
        fi
        docker tag my-node-app:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy:
    runs-on: self-hosted
    needs: ecr_push
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Decode and set kubeconfig
      env:
        KUBECONFIG_BASE64: ${{ secrets.KUBECONFIG_BASE64 }}
      run: |
        echo "$KUBECONFIG_BASE64" | base64 --decode > ~/.kube/kubeconfig
        export KUBECONFIG=~/.kube/kubeconfig

    - name: Deploy to Minikube
      run: kubectl apply -f deployment.yaml

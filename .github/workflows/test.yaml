name: Security and CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  security_scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: .
        base: ${{ github.event.before }}
        head: ${{ github.event.after }}
        extra_args: --only-verified

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'

    - name: Install dependencies
      run: npm install

    - name: Run Snyk
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      run: |
        npm install -g snyk
        snyk test --json > snyk-results.json || true
      continue-on-error: true

    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: auto

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Docker image
      run: |
        docker buildx create --use
        docker buildx build --file Dockerfile --tag my-node-app:${{ github.sha }} --load .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'my-node-app:${{ github.sha }}'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

    - name: Upload scan results
      uses: actions/upload-artifact@v2
      with:
        name: scan-results
        path: |
          snyk-results.json
          semgrep-results.sarif

    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Push Docker image to Amazon ECR
      run: |
        IMAGE_TAG=my-node-app:${{ github.sha }}
        REPOSITORY_URI=${{ secrets.AWS_ECR_REPOSITORY_URI }}
        docker tag $IMAGE_TAG $REPOSITORY_URI:$IMAGE_TAG
        docker push $REPOSITORY_URI:$IMAGE_TAG
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
